package com.example.demo4;

import jakarta.persistence.*;
import org.springframework.stereotype.Component;

@Entity
@Table(name = "records")
@Component
public class Record {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private int id;
    private String name;
    private int contact;

    public Record() {} // Default constructor

    public Record(String name, int id, int contact) {
        this.name = name;
        this.id = id;
        this.contact = contact;
    }

    public int getId() { return id; }
    public String getName() { return name; }
    public void setName(String name) { this.name = name; }
    public int getContact() { return contact; }
    public void setContact(int contact) { this.contact = contact; }

    @Override
    public String toString() {
        return "ID: " + id + ", Name: " + name + ", Contact: " + contact;
    }
}





package com.example.demo4;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

@Repository
public interface CrudRepository extends JpaRepository<Record, Integer> {
}




package com.example.demo4;

import org.springframework.stereotype.Service;
import org.springframework.beans.factory.annotation.Autowired;
import java.util.List;

@Service
public class CrudService {

    @Autowired
    private CrudRepository crudRepository; // Using JPA

    public String addition(String name, int id, int contact) {
        Record record = new Record(name, id, contact);
        crudRepository.save(record);
        return "Student added successfully!";
    }

    public String delete(int id) {
        if (crudRepository.existsById(id)) {
            crudRepository.deleteById(id);
            return "Record deleted successfully!";
        }
        return "ID not found!";
    }

    public String update(int id, String newName, int newContact) {
        return crudRepository.findById(id).map(record -> {
            record.setName(newName);
            record.setContact(newContact);
            crudRepository.save(record);
            return "Record updated successfully!";
        }).orElse("ID not found!");
    }

    public List<Record> display() {
        return crudRepository.findAll();
    }
}




package com.example.demo4;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/crud")
public class CrudController {

    @Autowired
    private CrudService crudService;

    @PostMapping("/add")
    public String addRecord(@RequestParam String name, @RequestParam int id, @RequestParam int contact) {
        return crudService.addition(name, id, contact);
    }

    @DeleteMapping("/delete/{id}")
    public String deleteRecord(@PathVariable int id) {
        return crudService.delete(id);
    }

    @PutMapping("/update/{id}")
    public String updateRecord(@PathVariable int id, @RequestParam String name, @RequestParam int contact) {
        return crudService.update(id, name, contact);
    }

    @GetMapping("/display")
    public List<Record> displayRecords() {
        return crudService.display();
    }
}




package com.example.demo4;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class Demo4Application {
    public static void main(String[] args) {
        SpringApplication.run(Demo4Application.class, args);
    }
}

