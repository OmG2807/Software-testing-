Project Explanation: Redis with Java (Maven)

This project demonstrates basic Redis operations using Java through the popular Jedis client. Below is a detailed breakdown of the project components.

Project Structure

RedisProject/
├── pom.xml
└── src
    └── main
        └── java
            └── com
                └── example
                    └── redis
                        └── RedisExample.java

1. pom.xml

This is the Maven configuration file where we define:
	•	The project dependencies
	•	The Java version to use (17 in this case)
	•	The Jedis dependency, which is required for working with Redis

Key content in pom.xml:

<dependency>
    <groupId>redis.clients</groupId>
    <artifactId>jedis</artifactId>
    <version>4.4.3</version>
</dependency>

This ensures that Maven downloads and includes the Jedis library.

2. Java File (RedisExample.java)

This file contains the core logic to interact with the Redis server. Below is an explanation of each part:

try (Jedis jedis = new Jedis("localhost", 6379)) {

	•	Connects to a Redis server running locally on port 6379 (the default Redis port).
	•	If the server is running, the connection will be established successfully.

Basic Redis Operations
	1.	Check Redis availability with ping():

System.out.println("Ping Response: " + jedis.ping());

	•	Sends a ping request to the Redis server to confirm the connection.
	•	Expected response: PONG

	2.	Set and get a key-value pair:

jedis.set("key1", "Hello, Redis!");
System.out.println("Stored key1: " + jedis.get("key1"));

	•	Stores a string value associated with a key (key1).
	•	Fetches and prints the stored value.

	3.	Increment a counter:

jedis.set("counter", "1");
jedis.incr("counter");
System.out.println("Counter value: " + jedis.get("counter"));

	•	Sets an initial value for a counter (counter = 1).
	•	Increments it using incr() and prints the result (2).

	4.	Delete a key:

jedis.del("key1");
System.out.println("Deleted key1, check: " + jedis.get("key1"));

	•	Deletes the key1 from Redis.
	•	Verifies deletion by trying to retrieve the value (should return null).

3. Redis Server Setup

To run this project, ensure you have a Redis server running locally:
	•	Linux/macOS: Run redis-server in the terminal.
	•	Windows: Run using WSL or use a Redis service like Docker.

4. How to Run the Project
	1.	Open the project in IntelliJ IDEA as a Maven project.
	2.	Ensure Redis is running locally.
	3.	Run the RedisExample.java file.
	4.	Observe the outputs, such as key-value storage, counter increments, and deletion.

5. Expected Output

Connection Successful
Ping Response: PONG
Stored key1: Hello, Redis!
Counter value: 2
Deleted key1, check: null

Extending the Project
	•	List Operations: Store lists using lpush and rpush.
	•	Hash Operations: Store complex objects using hset and hget.
	•	Sets: Store unique values using sadd.

This project is a good starting point for exploring Redis with Java for applications requiring in-memory data storage.